<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《Web应用基础》结业报告</title>
      <link href="/2023/06/18/bg03/"/>
      <url>/2023/06/18/bg03/</url>
      
        <content type="html"><![CDATA[<h1 id="《Web应用基础》结业报告"><a href="#《Web应用基础》结业报告" class="headerlink" title="《Web应用基础》结业报告"></a>《Web应用基础》结业报告</h1><h1 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h1><p>本项目是基于Hexo框架搭建的个人博客网站，并部署在了github上，所用到的主题是matery。首先先介绍一下Hexo框架，该框架是一个快捷、简单且功能强大的Node.js博客框架，该项目是我在b站以及csdn上观看教学视频以及文章进行开发。该项目的主要页面有首页、文章归档、文章分类、相册、以及我的个人中心页面这五个页面。</p><h1 id="二、开发过程"><a href="#二、开发过程" class="headerlink" title="二、开发过程"></a>二、开发过程</h1><h2 id="2-1-环境配置"><a href="#2-1-环境配置" class="headerlink" title="2.1 环境配置"></a>2.1 环境配置</h2><p>由于我的电脑之前就已经安装了git以及node.js，故直接安装hexo即可，安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><p>安装好hexo后，进入到创建好的博客文件夹内，继续执行以下命令即可完成基础的网站配置</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo init myblog </span><br><span class="line"><span class="built_in">cd</span> myblog </span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-部署到github上"><a href="#2-2-部署到github上" class="headerlink" title="2.2 部署到github上"></a>2.2 部署到github上</h2><p>首先需要打开博客根目录下的_config.yml文件配置以下内容</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/Allin202/Allin202.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">main</span></span><br></pre></td></tr></tbody></table></figure><p>然后要安装deploy-git，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><p>经过以上的配置，就可以使用以下命令来将博客部署在github上<br>（这里存在一个问题，在以下第三部分叙述）</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-相册页面的实现"><a href="#2-3-相册页面的实现" class="headerlink" title="2.3 相册页面的实现"></a>2.3 相册页面的实现</h2><p>相册图片的存储我用的是遇见图床，之前也换过好几个类似的图床，都避免不了一段时间后图片链接失效的问题<br>主要逻辑代码如下：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">let galleries = [];</span><br><span class="line">if (site.data &amp;&amp; site.data.galleries) {</span><br><span class="line">    galleries = site.data.galleries;</span><br><span class="line">}</span><br><span class="line">var pageTitle = page.title;</span><br><span class="line">function getCurrentGallery(galleries, pageTitle) {</span><br><span class="line">    for (let i = 0; i <span class="tag">&lt; <span class="attr">galleries.length</span>; <span class="attr">i</span>++) {</span></span><br><span class="line"><span class="tag">        <span class="attr">if</span> (<span class="attr">galleries</span>[<span class="attr">i</span>]['<span class="attr">name</span>'] == <span class="string">pageTitle)</span> {</span></span><br><span class="line"><span class="tag">            <span class="attr">return</span> <span class="attr">galleries</span>[<span class="attr">i</span>];</span></span><br><span class="line"><span class="tag">        }</span></span><br><span class="line"><span class="tag">    }</span></span><br><span class="line"><span class="tag">}</span></span><br><span class="line"><span class="tag"><span class="attr">var</span> <span class="attr">currentGallery</span> = <span class="string">getCurrentGallery(galleries,</span> <span class="attr">pageTitle</span>)</span></span><br><span class="line"><span class="tag"><span class="attr">var</span> <span class="attr">photos</span> = <span class="string">currentGallery.photos;</span></span></span><br><span class="line"><span class="tag"><span class="attr">let</span> <span class="attr">imageStr</span> = <span class="string">''</span></span></span><br><span class="line">for (var i = 0, len = photos.length; i &lt; len; i++) {</span><br><span class="line">    var photo = photos[i];</span><br><span class="line">    imageStr += "<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">\</span>"<span class="attr">https:</span>//<span class="attr">www.hualigs.cn</span>/<span class="attr">image</span>/" + <span class="attr">photo</span> + "\"\<span class="attr">n</span>" +</span></span><br><span class="line"><span class="tag">            "     <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">photo-item</span>\" <span class="attr">rel</span>=<span class="string">\</span>"<span class="attr">example_group</span>\"\<span class="attr">n</span>" +</span></span><br><span class="line"><span class="tag">            "     <span class="attr">data-fancybox</span>=<span class="string">\</span>"<span class="attr">images</span>\"&gt;</span>\n" +</span><br><span class="line">            "      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">\</span>"<span class="attr">https:</span>//<span class="attr">www.hualigs.cn</span>/<span class="attr">image</span>/" + <span class="attr">photo</span> + "\"\<span class="attr">n</span>" +</span></span><br><span class="line"><span class="tag">            "       <span class="attr">alt</span>=<span class="string">" + photo + "</span>&gt;</span>\n" +</span><br><span class="line">            "    <span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此外我还新建了一个json文件来分类相册</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"呼和浩特"</span>,</span><br><span class="line">    <span class="attr">"cover"</span>: <span class="string">"64758602b5892.jpg"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"呼和浩特"</span>,</span><br><span class="line">    <span class="attr">"photos"</span>: [</span><br><span class="line">      <span class="string">"64758602b5892.jpg"</span>,</span><br><span class="line">      <span class="string">"6475865c3870b.jpg"</span>,</span><br><span class="line">      <span class="string">"6475866103947.jpg"</span>,</span><br><span class="line">      <span class="string">"647586628e30f.jpg"</span>,</span><br><span class="line">      <span class="string">"64758664af9f0.jpg"</span>,</span><br><span class="line">      <span class="string">"64758664d49eb.jpg"</span>,</span><br><span class="line">      <span class="string">"64758666665d2.jpg"</span></span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"重庆"</span>,</span><br><span class="line">    <span class="attr">"cover"</span>: <span class="string">"647581951539e.jpg"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"重庆"</span>,</span><br><span class="line">    <span class="attr">"photos"</span>: [</span><br><span class="line">      <span class="string">"647582d0cdf92.jpg"</span>,</span><br><span class="line">      <span class="string">"647582d314272.jpg"</span>,</span><br><span class="line">      <span class="string">"647582d34229e.jpg"</span>,</span><br><span class="line">      <span class="string">"647582d2884ad.jpg"</span>,</span><br><span class="line">      <span class="string">"647582d124525.jpg"</span>,</span><br><span class="line">      <span class="string">"647581951539e.jpg"</span></span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"成都"</span>,</span><br><span class="line">    <span class="attr">"cover"</span>: <span class="string">"64758563da4df.jpg"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"成都"</span>,</span><br><span class="line">    <span class="attr">"photos"</span>: [</span><br><span class="line">      <span class="string">"64758563da4df.jpg"</span>,</span><br><span class="line">      <span class="string">"64741bec06960.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cbe4db8a.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cd2720de.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cbdbda32.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cbe4db8a.jpg"</span></span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"壁纸"</span>,</span><br><span class="line">    <span class="attr">"cover"</span>:<span class="string">"64741cbe4db8a.jpg"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"壁纸"</span>,</span><br><span class="line">    <span class="attr">"photos"</span>: [</span><br><span class="line">      <span class="string">"64741bf2938f2.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cc966f72.jpg"</span>,</span><br><span class="line">      <span class="string">"64741bf581354.jpg"</span>,</span><br><span class="line">      <span class="string">"64741bec06960.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cbe4db8a.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cd2720de.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cbdbda32.jpg"</span>,</span><br><span class="line">      <span class="string">"64741cbe4db8a.jpg"</span></span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-文章卡片的实现"><a href="#2-4-文章卡片的实现" class="headerlink" title="2.4 文章卡片的实现"></a>2.4 文章卡片的实现</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"articles"</span> <span class="attr">class</span>=<span class="string">"container articles"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row article-row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">page.posts.forEach</span>(<span class="attr">post</span> =&gt;</span> { %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article col s12 m6 l4"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-image"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.img</span>) { %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%= post.img %&gt;"</span> <span class="attr">class</span>=<span class="string">"responsive-img"</span> <span class="attr">alt</span>=<span class="string">"&lt;%- post.title %&gt;"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">%</span> } <span class="attr">else</span> { %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">var</span> <span class="attr">featureimg</span> = <span class="string">'/medias/featureimages/0.jpg'</span>;</span></span><br><span class="line"><span class="tag">                                <span class="attr">var</span> <span class="attr">featureImages</span> = <span class="string">theme.featureImages;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">if</span> (!<span class="attr">featureImages</span> || <span class="attr">featureImages.length</span> == <span class="string">0)</span> {</span></span><br><span class="line"><span class="tag">                                    <span class="attr">return</span> <span class="attr">featureimg</span>;</span></span><br><span class="line"><span class="tag">                                }</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                                <span class="attr">var</span> <span class="attr">len</span> = <span class="string">featureImages.length;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">var</span> <span class="attr">num</span> = <span class="string">Math.abs(hashCode(post.title)</span> % <span class="attr">len</span>);</span></span><br><span class="line"><span class="tag">                                <span class="attr">featureimg</span> = <span class="string">featureImages[num];</span></span></span><br><span class="line"><span class="tag">                            %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%- featureimg %&gt;"</span> <span class="attr">class</span>=<span class="string">"responsive-img"</span> <span class="attr">alt</span>=<span class="string">"&lt;%- post.title %&gt;"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">%</span> } %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content article-content"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"summary block-with-text"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.summary</span> &amp;&amp; <span class="attr">post.summary.length</span> &gt;</span> 0) { %&gt;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.summary</span> %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">%</span> } <span class="attr">else</span> { %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">strip_html</span>(<span class="attr">post.content</span>)<span class="attr">.substring</span>(<span class="attr">0</span>, <span class="attr">120</span>) %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">%</span> } %&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"publish-info"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"publish-date"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clock-o fa-fw icon-date"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">date</span>(<span class="attr">post.date</span>, <span class="attr">config.date_format</span>) %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"publish-author"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.categories</span> &amp;&amp; <span class="attr">post.categories.length</span> &gt;</span> 0) { %&gt;</span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-bookmark fa-fw icon-category"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">%</span> <span class="attr">post.categories.forEach</span>(<span class="attr">category</span> =&gt;</span> { %&gt;</span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(category.path) %&gt;"</span> <span class="attr">class</span>=<span class="string">"post-category"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">category.name</span> %&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">%</span> }); %&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">%</span> } %&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">post.tags</span> &amp;&amp; <span class="attr">post.tags.length</span> &gt;</span> 0) { %&gt;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-action article-tags"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">%</span> <span class="attr">post.tags.forEach</span>(<span class="attr">tag</span> =&gt;</span> { %&gt;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(tag.path) %&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"chip bg-color"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">tag.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">%</span> }); %&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">%</span> } %&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> }); %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>想新建文章时，只需在终端输入以下命令即可</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new post <span class="string">""</span></span><br></pre></td></tr></tbody></table></figure><p>这样就会在博客的_posts目录下新建一个.md文件，只需编辑该文件即可进行写文章<br>每个新建文章都有文章模板，只需修改即可实现文章的置顶、分类、标签等，模板如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: </span><br><span class="line">date: </span><br><span class="line">author: </span><br><span class="line">img: </span><br><span class="line">coverImg: </span><br><span class="line">top: false</span><br><span class="line">toc: true</span><br><span class="line">mathjax: false</span><br><span class="line">summary: </span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-博客首页左下角动漫人物的实现"><a href="#2-5-博客首页左下角动漫人物的实现" class="headerlink" title="2.5 博客首页左下角动漫人物的实现"></a>2.5 博客首页左下角动漫人物的实现</h2><p>第一步：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></tbody></table></figure><p>第二步：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku</span><br></pre></td></tr></tbody></table></figure><p>第三步：<br>在根目录配置文件中添加以下代码即可</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">    pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">    pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">    pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">    tagMode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    log:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    model:</span></span><br><span class="line"><span class="attr">        use:</span> <span class="string">live2d-widget-model-shizuku</span></span><br><span class="line"><span class="attr">    display:</span></span><br><span class="line"><span class="attr">        position:</span> <span class="string">right</span></span><br><span class="line"><span class="attr">        width:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">        height:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">    mobile:</span></span><br><span class="line"><span class="attr">        show:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    react:</span></span><br><span class="line"><span class="attr">        opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></tbody></table></figure><h1 id="三、问题汇总以及解决办法"><a href="#三、问题汇总以及解决办法" class="headerlink" title="三、问题汇总以及解决办法"></a>三、问题汇总以及解决办法</h1><h2 id="3-1-上传github出错fff"><a href="#3-1-上传github出错fff" class="headerlink" title="3.1 上传github出错fff"></a>3.1 上传github出错fff</h2><p>当我修改部分内容，想要上传到github上时，使用以下命令</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure><p>他会给我报以下这样的错误信息<br><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/themes/matery/source/medias/mdpic/1.png" width="50%" height="30%"></p><br>解决方案：<br>在经过网上的搜索之后，得知该问题的出现是因为node.js的版本问题，所以我又下载了nvm这个工具来管理node.js的版本，经过测试发现v12的版本可以兼容，而我常用的v16版本会报错，所以在我每次需要上传的时候我会将版本切换为v12.<h2 id="3-2-相册的分类"><a href="#3-2-相册的分类" class="headerlink" title="3.2 相册的分类"></a>3.2 相册的分类</h2><p>一开始我打算做一个相册页面，分为两个页面，一个页面是展示各个相册分类，然后可以点击分类进入到该分类下的相册页面，这部分的逻辑我一开始是想着用绝对路径来实现，到了实现的时候发现太过于繁琐，所以我就一边研究一边上网检索类似的问题。<br>解决方案：<br>因为相册里的图片我都是存储在图床中的，所以每个图片链接的前半部分都是相同的，所以我就将后半部分不同的链接存储在一个json文件中，像2.3部分展示的那样，每点进一个分类，他就会统计这个分类下有多少张图片，然后遍历对应的json数据将图片链接的前半部分与后半部分连接起来，最终渲染出来。</p><h2 id="3-3-博客首页音乐板块的实现"><a href="#3-3-博客首页音乐板块的实现" class="headerlink" title="3.3 博客首页音乐板块的实现"></a>3.3 博客首页音乐板块的实现</h2><p>在我访问其他人的博客时，发现他们的首页会有一个音乐板块，可以实现音乐的播放，我感觉很炫酷，所以想在自己的博客首页也实现这样的一个板块，不过很多音乐平台是不支持外链播放的<br>解决方案：<br>在网页中打开网易云音乐播放一首歌曲，可以看到<a href="http://music.163.com/song/media/outer/url?id=XXXXXX.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=XXXXXX.mp3</a><br>这样类似的网址，其中XXXXXX就是歌曲的ID号，每首歌只需换掉这个ID号就是该歌曲的外链了，歌曲封面图也可以由F12得到，由此我新建了一个json文件存储歌曲信息，如下：</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Beautiful World"</span>,</span><br><span class="line">        <span class="attr">"artist"</span>: <span class="string">"Westlife"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"http://music.163.com/song/media/outer/url?id=20707408.mp3"</span>,</span><br><span class="line">        <span class="attr">"cover"</span>: <span class="string">"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"</span></span><br><span class="line">    },{</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"River Flows in You"</span>,</span><br><span class="line">        <span class="attr">"artist"</span>: <span class="string">"Yiruma"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"http://music.163.com/song/media/outer/url?id=26237342.mp3"</span>,</span><br><span class="line">        <span class="attr">"cover"</span>: <span class="string">"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"</span></span><br><span class="line">    },{</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Hello My Love"</span>,</span><br><span class="line">        <span class="attr">"artist"</span>: <span class="string">"Westlife"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"http://music.163.com/song/media/outer/url?id=1338728670.mp3"</span>,</span><br><span class="line">        <span class="attr">"cover"</span>: <span class="string">"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"</span></span><br><span class="line">    },{</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"If I Let You Go"</span>,</span><br><span class="line">        <span class="attr">"artist"</span>: <span class="string">"Westlife"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"http://music.163.com/song/media/outer/url?id=27220254.mp3"</span>,</span><br><span class="line">        <span class="attr">"cover"</span>: <span class="string">"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"</span></span><br><span class="line">    },{</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Señorita"</span>,</span><br><span class="line">        <span class="attr">"artist"</span>: <span class="string">"Shawn Mendes/Camila Cabello"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"http://music.163.com/song/media/outer/url?id=1373168742.mp3"</span>,</span><br><span class="line">        <span class="attr">"cover"</span>: <span class="string">"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>这样在首页就可以实现音乐播放了</p><h2 id="3-4-图床不稳定的问题"><a href="#3-4-图床不稳定的问题" class="headerlink" title="3.4 图床不稳定的问题"></a>3.4 图床不稳定的问题</h2><p>图床我先后用了imagehub、imgTP、遇见图床等，都避免不了的一个问题就是一段时间后网页中的图片加载不出来，究其原因是图片链接失效了。网上的说法是自己搭建一个个人图床，这样就会稳定许多，我采用的方案是github+picgo搭建，遇到的一个问题就是我先后下载多次picgo各个版本，都是安装成功，但是页面无法打开，双击后查看任务管理器是运行着的，甚至双击多次会有多个进程在运行，但就是没有页面，根据网上的方法配置最终也没有解决问题，所以现在该博客用的还是免费图床，我的个人图床还未搭建成功。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>该博客的搭建让我熟悉并初步掌握了hexo这个框架，也对一些css样式有了新的认识，而且该博客部署在github上，在部署以及每一次上传的过程中，我对git命令以及github的一些操作都有了一定程度的学习和进步，而且博客的编写使用的是Markdown语法，对此我之前是不甚了解的，经过这个博客的搭建，以及几篇文章的编写，让我对Markdown语法也有了进一步的认识与掌握。搭建个人博客是一个非常有意义的事情，同时也是一个不断学习和改进的过程，需要不断学习新的知识，如前端技术css/html、Markdown语法、图片优化等。总的来说，本次项目的完成让我受益匪浅，也让我对前段技术有了浓厚的兴趣，在今后的学习生活中，我会继续学习前端技术，打磨自己的技术，写出更好看、功能更强大的网页。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报告 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript &amp; TypeScript 学习总结</title>
      <link href="/2023/06/17/bg02/"/>
      <url>/2023/06/17/bg02/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-amp-TypeScript-学习总结"><a href="#JavaScript-amp-TypeScript-学习总结" class="headerlink" title="JavaScript &amp; TypeScript 学习总结"></a>JavaScript &amp; TypeScript 学习总结</h1><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JS是一种属于网络的高级脚本语言，在Web开发中必不可少，按钮事件的绑定、表格内容的更新、输入内容的获取等，这些都离不开JS，而且通过ajax以及axios还可以对后端发送请求，实现前后端交互，这些足以凸显JS的强大。<br><br>但是强如JS也有缺点，由于JS是一种弱类型语言，所以在开发大型项目时，容易出现类型错误和难以维护的问题，而且JS是一种动态类型语言，只有在运行时才能检查错误，这一点很不方便。<br><br>总的来说，学习JS是一项具有挑战性和充满乐趣的过程。通过学习JS，我不仅掌握了一门重要的编程语言，还培养了解决问题和创造性思维的能力。我相信，在不断学习和实践的过程中，我能够不断提升自己的技术水平，为实际项目的开发做出更大的贡献。<br><br><br></p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>TypeScript是一门静态类型语言，它可以在编译时检查代码的类型错误，从而减少运行时错误。这使得代码更加健壮和可维护,而且TS是JS的超集，它可以使用JS的所有功能，并且还可以使用额外的功能，如类型注释、接口、枚举等。总的来说，TS比JS更安全、更可靠、更易于维护和扩展。TS还提供了丰富的工具和生态系统。它的编译器可以将TS代码转换为JavaScript代码，使得我们可以在任何支持JavaScript的环境中运行TS代码。此外，TS还有强大的编辑器支持，如VS Code，可以提供智能代码补全、错误检查等功能，大大提高了开发效率。此外，TS还有许多第三方库和框架的支持，如Angular、React等，可以帮助我们更好地开发Web应用。<br><br>总而言之，学习TS是一次非常有意义的经历。它的静态类型系统、面向对象特性和丰富的工具生态系统使得我们可以编写更加可靠、可读性更高的代码。我相信通过不断地学习和实践，我能够更好地掌握TS，并将其应用到实际项目中，为自己的职业发展打下坚实的基础<br></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML&amp;CSS 学习总结</title>
      <link href="/2023/06/17/bg01/"/>
      <url>/2023/06/17/bg01/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-amp-CSS-学习总结"><a href="#HTML-amp-CSS-学习总结" class="headerlink" title="HTML&amp;CSS 学习总结"></a>HTML&amp;CSS 学习总结</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>这学期选修了《Web应用基础》，第一部分内容便是html，足以见得其在web开发中的重要地位，这学期通过老师在课堂上的讲解以及棋歌教学网和菜鸟教程等网站的学习，让我对html这个超文本语言有了新的认识。<br><br>在学习HTML的过程中，我遇到了很多困难和挑战。首先，HTML的语法比较繁琐，需要我们仔细地阅读和理解每一个标签和属性的含义和用法。其次，HTML的设计和制作需要我们具备一定的美术和设计能力，需要我们能够将网页的结构和布局设计得美观、简洁、易于使用。而且对于HTML的学习不能只停留在语法上，要实际的应用才能灵活掌握各种标签的特性。<br><br>总之，学习HTML是一项非常有意义和有价值的事情。通过学习HTML，我们可以掌握网页的基础知识和技能，提高自己的设计和制作能力。同时，学习HTML还可以让我们更好地理解和欣赏网页。因此，我会继续努力学习HTML，不断提高自己的技能和能力。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>作为前端三剑客之一的CSS，主要作用是控制网页的布局、颜色、字体、动画等样式，CSS是一个极其灵活的语言，可就是因为他足够灵活，所以在学习的过程中也是困难重重，比如flex布局可以更加方便的实现响应式布局，光这一种布局就可以完成很多种功能样式，对于很多属性都需要经常性的实践操作才能记忆深刻。还有Grid布局，这种布局可以更加方便的实现网页布局，尤其是在响应式布局中，可以更加轻松的实现不同屏幕尺寸的布局，对于该布局同样有很多复杂的属性，在学习过程中确实是一大难点，属性太多太杂，导致我不能清晰的掌握每种属性的作用以及技巧，这些都需要在今后的学习生活中不断实践来锻炼强化。<br><br>总的来说，CSS可以使你的网页变得更加好看，所以在前端开发中，CSS举足轻重。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记（持续更新中）</title>
      <link href="/2023/05/26/blog01/"/>
      <url>/2023/05/26/blog01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基础篇"><a href="#1-基础篇" class="headerlink" title="1.基础篇"></a>1.基础篇</h1><h2 id="1-1通用语法及分类"><a href="#1-1通用语法及分类" class="headerlink" title="1.1通用语法及分类"></a>1.1通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限<h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3></li></ul><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br></pre></td></tr></tbody></table></figure><p>查询当前数据库：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br></pre></td></tr></tbody></table></figure><p>创建数据库：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [ <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ] 数据库名 [ <span class="keyword">DEFAULT</span>    <span class="keyword">CHARSET</span> 字符集] [<span class="keyword">COLLATE</span> 排序规则 ];</span><br></pre></td></tr></tbody></table></figure><p>删除数据库：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> [ <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ] 数据库名;</span><br></pre></td></tr></tbody></table></figure><p>使用数据库：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> DATABASENAME;</span><br></pre></td></tr></tbody></table></figure><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br></pre></td></tr></tbody></table></figure><p>查询表结构：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">DESC 表名;</span><br></pre></td></tr></tbody></table></figure><p>查询指定表的建表语句：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></tbody></table></figure><p>创建表：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [<span class="keyword">COMMENT</span> 字段<span class="number">1</span>注释],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [<span class="keyword">COMMENT</span> 字段<span class="number">2</span>注释],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [<span class="keyword">COMMENT</span> 字段<span class="number">3</span>注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [<span class="keyword">COMMENT</span> 字段n注释]</span><br><span class="line">)[ <span class="keyword">COMMENT</span> 表注释 ];</span><br></pre></td></tr></tbody></table></figure><p><strong>最后一个字段后面没有逗号</strong><br>添加字段：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型(长度) [<span class="keyword">COMMENT</span> 注释] [约束];</span><br><span class="line">例：<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> nickname <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>;</span><br></pre></td></tr></tbody></table></figure><p>修改数据类型：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 新数据类型(长度);</span><br></pre></td></tr></tbody></table></figure><p>修改字段名和字段类型：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span> 旧字段名 新字段名 类型(长度) [<span class="keyword">COMMENT</span> 注释] [约束];</span><br></pre></td></tr></tbody></table></figure><p>例：将 emp 表的 nickname 字段修改为 username，类型为 varchar(30)</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">CHANGE</span> nickname username <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>;</span><br></pre></td></tr></tbody></table></figure><p>删除字段：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></tbody></table></figure><p>修改表名：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">RENAME</span> <span class="keyword">TO</span> 新表名</span><br></pre></td></tr></tbody></table></figure><p>删除表：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></tbody></table></figure><p>删除表，并重新创建该表：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></tbody></table></figure><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></tbody></table></figure><p>全部字段：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></tbody></table></figure><p>批量添加数据：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></tbody></table></figure><p>注意事项</p><ul><li><strong>字符串</strong>和<strong>日期类型</strong>数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内<h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4></li></ul><p>修改数据：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> = 值<span class="number">1</span>, 字段名<span class="number">2</span> = 值<span class="number">2</span>, ... [ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> emp <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'Jack'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p>删除数据：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></tbody></table></figure><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名字段</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line"><span class="keyword">LIMIT</span></span><br><span class="line">分页参数</span><br></pre></td></tr></tbody></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3</span>, ... <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure><p>设置别名：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ <span class="keyword">AS</span> 别名<span class="number">1</span> ], 字段<span class="number">2</span> [ <span class="keyword">AS</span> 别名<span class="number">2</span> ], 字段<span class="number">3</span> [ <span class="keyword">AS</span> 别名<span class="number">3</span> ], ... <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ 别名<span class="number">1</span> ], 字段<span class="number">2</span> [ 别名<span class="number">2</span> ], 字段<span class="number">3</span> [ 别名<span class="number">3</span> ], ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure><p>去除重复记录：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure><p>转义：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'/_张三'</span> ESCAPE <span class="string">'/'</span></span><br></pre></td></tr></tbody></table></figure><p>/ 之后的_不作为通配符 </p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></tbody></table></figure><p>条件： </p><table><thead><tr><th align="left">比较运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td></tr><tr><td align="left">=</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt; 或 !=</td><td align="left">不等于</td></tr><tr><td align="left">BETWEEN … AND …</td><td align="left">在某个范围内（含最小、最大值）</td></tr><tr><td align="left">IN(…)</td><td align="left">在 in 之后的列表中的值，多选一</td></tr><tr><td align="left">LIKE 占位符</td><td align="left">模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td align="left">IS NULL</td><td align="left">是 NULL</td></tr></tbody></table><table><thead><tr><th align="left">逻辑运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">AND 或 &amp;&amp;</td><td align="left">并且（多个条件同时成立）</td></tr><tr><td align="left">OR 或 ||</td><td align="left">或者（多个条件任意一个成立）</td></tr><tr><td align="left">NOT 或 !</td><td align="left">非，不是</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 年龄等于30</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age &lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 小于等于</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age &lt;= <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 没有身份证</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">or</span> idcard = <span class="string">''</span>;</span><br><span class="line"><span class="comment">-- 有身份证</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> idcard;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age != <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄在20到30之间</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age &gt;= <span class="number">20</span> <span class="keyword">and</span> age &lt;= <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 下面语句不报错，但查不到任何信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">30</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 性别为女且年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age &lt; <span class="number">30</span> <span class="keyword">and</span> gender = <span class="string">'女'</span>;</span><br><span class="line"><span class="comment">-- 年龄等于25或30或35</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age = <span class="number">25</span> <span class="keyword">or</span> age = <span class="number">30</span> <span class="keyword">or</span> age = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>);</span><br><span class="line"><span class="comment">-- 姓名为两个字</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'__'</span>;</span><br><span class="line"><span class="comment">-- 身份证最后为X</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">'%X'</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数(null 值不参与聚合函数运算)：</p><table><thead><tr><th align="left">函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">count</td><td align="left">统计数量</td></tr><tr><td align="left">max</td><td align="left">最大值</td></tr><tr><td align="left">min</td><td align="left">最小值</td></tr><tr><td align="left">avg</td><td align="left">平均值</td></tr><tr><td align="left">sum</td><td align="left">求和</td></tr></tbody></table><p>语法：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(字段列表) <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> employee <span class="keyword">where</span> workaddress = <span class="string">"广东省"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [ <span class="keyword">WHERE</span> 条件 ] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [ <span class="keyword">HAVING</span> 分组后的过滤条件 ];</span><br></pre></td></tr></tbody></table></figure><p>where 和 having 的区别：</p><ul><li>执行时机不同：where 是分组之前进行过滤，不满足 where 条件不参与分组；having 是分组后对结果进行过滤。</li><li>判断条件不同：where 不能对聚合函数进行判断，而 having 可以。<br>例子： </li></ul><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性数量</span></span><br><span class="line"><span class="keyword">select</span> gender, <span class="keyword">count</span>(*) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性的平均年龄</span></span><br><span class="line"><span class="keyword">select</span> gender, <span class="keyword">avg</span>(age) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 年龄小于45，并根据工作地址分组</span></span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="keyword">count</span>(*) <span class="keyword">from</span> employee <span class="keyword">where</span> age &lt; <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress;</span><br><span class="line"><span class="comment">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span></span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="keyword">count</span>(*) address_count <span class="keyword">from</span> employee <span class="keyword">where</span> age &lt; <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> address_count &gt;= <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure><p>注意事项</p><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为<strong>聚合函数</strong>和<strong>分组字段</strong>，查询其他字段无任何意义<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4></li></ul><p>语法：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>, 字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序<br>例子： </li></ul><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br><span class="line"><span class="comment">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>, entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><p>注意事项<br>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> 起始索引, 查询记录数;</span><br></pre></td></tr></tbody></table></figure><p>例子： </p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询第一页数据，展示10条</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employee <span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 查询第二页</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employee <span class="keyword">LIMIT</span> <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure><p>注意事项</p><ul><li>起始索引从 0 开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL 是 LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10<h4 id="DQL-执行顺序"><a href="#DQL-执行顺序" class="headerlink" title="DQL 执行顺序"></a>DQL 执行顺序</h4></li></ul><p>1.FROM(从哪张表查询) -&gt; 2.WHERE(对数据进行筛选) -&gt; 3.GROUP BY(对筛选的数据进行分组) -&gt; 4.HAVING(分组后的条件列表)-&gt; 5.SELECT(选择对应数据) -&gt; 6.ORDER BY(对结果排序) -&gt; 7.LIMIT(对结果分页)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 关系型数据库 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
